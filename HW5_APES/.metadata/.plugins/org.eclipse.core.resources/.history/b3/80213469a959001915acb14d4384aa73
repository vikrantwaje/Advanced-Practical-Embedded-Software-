/************************************************************************************
 * @file main.c
 * @brief Contains main function
 * @author Vikrant Waje
 * @date April 7, 2019
 *
 ************************************************************************************/

//***********************************************************************************

//***********************************************************************************
//                                  Include files
//***********************************************************************************

#include"main.h"

//***********************************************************************************
//                                  Global variables
//***********************************************************************************

xSemaphoreHandle g_pUARTSemaphore;// The mutex that protects concurrent access of UART from multiple tasks.


//***********************************************************************************
//                              Function implementation
//***********************************************************************************


int main(void)
{
    //
    // Set the clocking to run at 50 MHz from the PLL.
    //
    clock_init();

    //
    // Initialize the UART and configure it for 115,200, 8-N-1 operation.
    //
    UART_init();

    //Initialise the ONBOARD Led
     gpio_init();

    //
    // Print demo introduction.
    //
    UARTprintf("\n\nWelcome to the EK-TM4C123GXL FreeRTOS Demo!\n");

    //
    // Create a mutex to guard the UART.
    //
    //g_pUARTSemaphore = xSemaphoreCreateMutex();

    volatile uint32_t ui32Loop;




        //
        // Loop forever.
        //
        while(1)
        {
            //
            // Turn on the LED.
            //
            GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0x01);

            //
            // Delay for a bit.
            //
            for(ui32Loop = 0; ui32Loop < 200000; ui32Loop++)
            {
            }

            //
            // Turn off the LED.
            //
            GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0x0);

            //
            // Delay for a bit.
            //
            for(ui32Loop = 0; ui32Loop < 200000; ui32Loop++)
            {
            }
        }


    //
    // Create the LED task.
    //
//    if(LEDTaskInit() != 0)
//    {
//
//        while(1)
//        {
//        }
//    }
//
//    //
//    // Create the switch task.
//    //
//    if(SwitchTaskInit() != 0)
//    {
//
//        while(1)
//        {
//        }
//    }

    //
    // Start the scheduler.  This should not return.
    //
    vTaskStartScheduler();

    //
    // In case the scheduler returns for some reason, print an error and loop
    // forever.
    //

    while(1)
    {
    }
}
