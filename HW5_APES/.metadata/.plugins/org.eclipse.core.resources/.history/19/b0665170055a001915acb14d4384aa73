/***************************************************************************************
 * @file myi2c.c
 * @brief This file is to be used for initialization and data transfer function for I2C module.
 * @author Vikrant Waje
 * @date April 7, 2019
 *@Reference: http://www.ti.com/lit/an/spma073/spma073.pdf
 *****************************************************************************************/

//***********************************************************************************
//                                  Include files
//***********************************************************************************
#include "mygpio.h"


//***********************************************************************************
//                                  Global variables
//***********************************************************************************
uint32_t sys_clock;

//***********************************************************************************
//                                 Function implementation
//***********************************************************************************
/*------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Setup the I2C peripheral.


 @param: None
 @param:None

 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void i2c_init(void)
{

    //
    // Stop the Clock, Reset and Enable I2C Module
    // in Master Function
    //
    SysCtlPeripheralDisable(SYSCTL_PERIPH_I2C2);
    SysCtlPeripheralReset(SYSCTL_PERIPH_I2C2);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C2);
    //
    // Wait for the Peripheral to be ready for programming
    //
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_I2C2));
    //
    // Initialize and Configure the Master Module
    //
    I2CMasterInitExpClk(I2C2_BASE, sys_clock, false);


}

/*------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Read from I2C.


 @param: reg address: Address from which data is to be read
 @param: data: Pointer to data in which data is to be stored

 @return: i2c_status_t: Status of I2C operation
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
i2c_status_t i2c_read_byte(uint8_t reg_addr, uint8_t *data){


}


