/***********************************************************************************
 * @file mytemperature_sensor.h
 * @brief Contains data transfer function for tempearture sensor
 * @author Vikrant Waje
 * @date April 7, 2018
 *
 *****************************************************************************/

#ifndef INCLUDES_MYTEMPERATURE_SENSOR_H_
#define INCLUDES_MYTEMPERATURE_SENSOR_H_

//***********************************************************************************
//                              Include files
//***********************************************************************************
#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_i2c.h"
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/i2c.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom_map.h"

//***********************************************************************************
//                                  Macros
//***********************************************************************************
#define TEMP_SENSOR_I2C_ADDRESS (0x48)
#define TEMPERATURE_REG     (0x00)
#define CONFIGURATION_REG    (0x01)
#define TLOW_REG        (0x02)
#define THIGH_REG       (0x03)

#define CONVERSION_RATE_0_25    ((0x00))
#define CONVERSION_RATE_1   ((0x01))
#define CONVERSION_RATE_4   ((0x02))
#define CONVERSION_RATE_8   ((0x03))
#define CONVERSION_RATE_MASK    (0x03)
#define SHUTDOWN_ON     ((0x01))
#define SHUTDOWN_OFF        ((0x00))

#define EM_ON           ((0x01))
#define EM_OFF          ((0x00))
#define EM_MASK         (0x01)


#define FAULT_1         ((0x00))
#define FAULT_2         ((0x01))
#define FAULT_3         ((0x02))
#define FAULT_4         ((0x03))
#define FAULT_MASK      (0x03)

#define RESOLUTION_MASK         (0x03)
#define SENSOR_RESOLUTION_12_BIT    (0x03)




//***********************************************************************************
//                              Global variables
//***********************************************************************************


//***********************************************************************************
//                              Function Prototype
//***********************************************************************************
/*------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Initialise the I2C module.


 @param: None
 @param:None

 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void i2c_init();

/*------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Read from I2C.

 @param: slave address: Address of sensor from which data is to be read
 @param: reg address: Address of register from which data is to be read
 @param: data: Pointer to data in which data is to be stored

 @return: i2c_status_t: Status of I2C operation
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
i2c_status_t i2c_read_two_byte(uint8_t slave_addr,uint8_t reg_addr, uint8_t *data);
#endif /* INCLUDES_MYI2C_H_ */
